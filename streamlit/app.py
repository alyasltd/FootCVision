import streamlit as st
import cv2
import numpy as np
import tempfile
from sklearn.cluster import KMeans
from phase1.inference import PlayerInference
from phase2.trackhsv import TrackHSV
from phase2.trackkmeans import TrackKMeans
from phase3.hsvclassifier import HSVClassifier
from phase3.kmeansclassifier import KMeansClassifier



# Configuration de la page
st.set_page_config(page_title="Application Streamlit", layout="wide")

# Cr√©ation des onglets
tab1, tab2 = st.tabs(["üìå Pr√©sentation", "‚öôÔ∏è D√©mo"])

# Onglet Pr√©sentation
with tab1:
    st.title("Bienvenue sur notre Application Streamlit üéâ")
    st.write("""
        Cette application est un exemple simple utilisant **Streamlit**.
        
        Elle contient deux onglets :
        - **Pr√©sentation** : Cette section explique bri√®vement l'application.
        - **D√©mo** : Une d√©monstration interactive.
    """)
    st.image("https://source.unsplash.com/random/800x300", caption="Illustration")

# Onglet D√©mo
with tab2:
    st.title("üé¨ D√©monstration")

    # √âtape 1 : S√©lection de la vid√©o
    st.header("1Ô∏è‚É£ S√©lection de la Vid√©o")
    
    col1, col2 = st.columns(2)

    with col1:
        uploaded_video = st.file_uploader("T√©l√©versez une vid√©o üìÇ", type=["mp4", "avi", "mov"])
    
    with col2:
        st.write("Ou s√©lectionnez une vid√©o pr√©d√©finie :")
        video_options = {
            "üè∞ Colis√©e (Rome)": "videos/colosseum.mp4",
            "üèúÔ∏è Grand Canyon": "videos/canyon.mp4",
            "üè† Sc√®ne int√©rieure": "videos/room.mp4"
        }
        selected_video = st.radio("Vid√©os disponibles :", list(video_options.keys()))

    # D√©finition du chemin de la vid√©o
    video_path = None
    if uploaded_video:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_file:
            temp_file.write(uploaded_video.read())
            video_path = temp_file.name
    else:
        video_path = video_options[selected_video]

    # Affichage de la vid√©o s√©lectionn√©e
    if video_path:
        st.video(video_path)

    # Bouton d'inf√©rence
    if st.button("üöÄ Lancer l'inf√©rence"):

        st.header("2Ô∏è‚É£ Extraction d'Images Cl√©s")
        st.write("üì∏ Extraction d'images √† partir de la vid√©o...")

        cap = cv2.VideoCapture(video_path)
        frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        frame_rate = int(cap.get(cv2.CAP_PROP_FPS))

        extracted_images = []
        for i in range(5):  # Extraire 5 images √† intervalles r√©guliers
            frame_index = int((frame_count / 5) * i)
            cap.set(cv2.CAP_PROP_POS_FRAMES, frame_index)
            ret, frame = cap.read()
            if ret:
                extracted_images.append(frame)

        cap.release()

        if extracted_images:
            st.write("‚úÖ Extraction r√©ussie !")
            col1, col2, col3, col4, col5 = st.columns(5)
            cols = [col1, col2, col3, col4, col5]
            for i, img in enumerate(extracted_images):
                with cols[i]:
                    st.image(cv2.cvtColor(img, cv2.COLOR_BGR2RGB), caption=f"Image {i+1}")

        # √âtape 3 : S√©lection de la m√©thode de diff√©renciation
        st.header("3Ô∏è‚É£ M√©thode de Diff√©renciation")
        method = st.radio("Choisissez une m√©thode :", ["K-Means", "HSV"], index=0)

        if method == "K-Means":
            st.write("üé® **K-Means Clustering** pour la segmentation des couleurs.")

            def apply_kmeans(image, k=3):
                """ Applique K-Means Clustering √† une image """
                img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                img = img.reshape((-1, 3))
                kmeans = KMeans(n_clusters=k, random_state=42)
                kmeans.fit(img)
                clustered_img = kmeans.cluster_centers_[kmeans.labels_]
                clustered_img = clustered_img.reshape(image.shape)
                return clustered_img.astype(np.uint8)

            k_value = st.slider("Nombre de clusters (K) :", 2, 10, 3)
            processed_image = apply_kmeans(extracted_images[0], k=k_value)

        else:
            st.write("üåà **Segmentation HSV** pour la d√©tection de couleurs.")

            def apply_hsv(image):
                """ Convertit l'image en HSV et applique un masque """
                hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
                lower_bound = np.array([30, 40, 40])
                upper_bound = np.array([80, 255, 255])
                mask = cv2.inRange(hsv, lower_bound, upper_bound)
                result = cv2.bitwise_and(image, image, mask=mask)
                return result

            processed_image = apply_hsv(extracted_images[0])

        # Affichage des r√©sultats
        st.write("üîç **R√©sultat de la segmentation**")
        col1, col2 = st.columns(2)
        with col1:
            st.image(cv2.cvtColor(extracted_images[0], cv2.COLOR_BGR2RGB), caption="Image Originale")
        with col2:
            st.image(processed_image, caption=f"Image Trait√©e ({method})")